name: Clone Repos
on: [push]
jobs:
  clone:
    runs-on: self-hosted
    steps:
      - name: Clone kool repo
        run: |
          if [ ! -d "kool" ]; then
            echo "Cloning kool repo..."
            git clone https://github.com/vinaybv77716/kool.git
          else
            echo "kool repo already exists. Skipping clone."
          fi
      - name: Clone terraform-eks repo
        run: |
          if [ ! -d "terraform-eks" ]; then
            echo "Cloning terraform-eks repo..."
            git clone https://github.com/vinaybv77716/terraform-eks.git
          else
            echo "terraform-eks repo already exists. Skipping clone."
          fi  
      - name: Installing prereqisites
        run: |
          echo "#######   Installing prerequisites   ######"
          sudo apt-get update
          # sudo ./ terraform-eks/prerequisites.sh 
    
      
      - name: Configure AWS CLI
        run: |
          echo "aws configure"
          aws configure set aws_access_key_id "${{ secrets.AWS_ACCESS_KEY_ID }}"
          aws configure set aws_secret_access_key "${{ secrets.AWS_SECRET_ACCESS_KEY }}"
          aws configure set default.region "${{ secrets.AWS_REGION }}"
          aws configure set output json
      - name: build docker image and push to ecr repo
        run: |
          sudo apt update
          sudo chown $USER /var/run/docker.sock
          aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin 200901485389.dkr.ecr.us-east-1.amazonaws.com
          docker build -t kool-vinay kool/.
          docker tag kool-vinay:latest 200901485389.dkr.ecr.us-east-1.amazonaws.com/kool-vinay:latest
          docker push 200901485389.dkr.ecr.us-east-1.amazonaws.com/kool-vinay:latest 
          docker rmi 200901485389.dkr.ecr.us-east-1.amazonaws.com/kool-vinay:latest 
      - name: terraform initialization 
        run: |
         cd terraform-eks/ && terraform init 
         terraform plan

            read -p "Do you want to run terraform plan? (y/n): " confirm
            if [[ "$confirm" == "y" ]]; then
            terraform plan
            else
            echo "Skipping terraform plan"
            fi
        #  terraform apply -auto-approve
     
      - name: update kubeconfig
        run: |
          echo "#######   kubeconfig    ######"
          aws eks  update-kubeconfig --region us-east-1 --name my-eks-cluster
          kubectl get pods -A

      
      - name: OIDC and IAM Service Account setup if not already done
        run: |
          echo "#######   OIDC Setup   ######"
          OIDC_CHECK=$(aws eks describe-cluster --name my-eks-cluster --region us-east-1 --query "cluster.identity.oidc.issuer" --output text)
      
          if [ "$OIDC_CHECK" != "None" ]; then
            echo "OIDC provider already associated: $OIDC_CHECK"
          else
            echo "Associating OIDC provider..."
            eksctl utils associate-iam-oidc-provider --cluster my-eks-cluster --approve --region us-east-1
          fi
      
          # Check if service account exists
          if kubectl get sa eks-admin-sa -n kube-system > /dev/null 2>&1; then
            echo "Service account 'eks-admin-sa' already exists in kube-system namespace."
          else
            echo "Creating service account and attaching policies..."
            eksctl create iamserviceaccount --name vinay --namespace kube-system --cluster my-eks-cluster --role-name vinay-role \
            --attach-policy-arn arn:aws:iam::aws:policy/AdministratorAccess --approve --override-existing-serviceaccounts

             eksctl create iamidentitymapping --cluster  my-eks-cluster --region=us-east-1 --arn "arn:aws:iam::200901485389:user/project-ciq-poc" --group system:masters --username admin
          fi
      
          # Output service account info
          kubectl get sa vinay -n kube-system -o yaml
 
      
      - name: Install AWS Load Balancer Controller if not already installed
        run: |
          echo "#######   ALB Controller install check   ######"
          if helm list -n kube-system | grep -q 'aws-load-balancer-controller'; then
            echo "ALB Controller already installed"
          else
            echo "Installing ALB Controller"
            helm install aws-load-balancer-controller eks/aws-load-balancer-controller \
              -n kube-system \
              --set clusterName=my-eks-cluster \
              --set serviceAccount.create=false \
              --set serviceAccount.name=vinay
          fi
      
      
