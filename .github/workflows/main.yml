name: Clone Repos
on: [push]
jobs:
  clone:
    runs-on: self-hosted
    steps:
      - name: Clone kool repo
        run: |
          if [ ! -d "kool" ]; then
            echo "Cloning kool repo..."
            git clone https://github.com/vinaybv77716/kool.git
          else
            echo "kool repo already exists. Skipping clone."
          fi
      - name: Clone terraform-eks repo
        run: |
          if [ ! -d "terraform-eks" ]; then
            echo "Cloning terraform-eks repo..."
            git clone https://github.com/vinaybv77716/terraform-eks.git
          else
            echo "terraform-eks repo already exists. Skipping clone."
          fi  
      - name: Check and install Terraform if not present
        run: |
          if ! command -v terraform &> /dev/null
          then
            echo "Terraform not found. Installing Terraform..."
            sudo apt-get update && sudo apt-get install -y gnupg software-properties-common curl
            curl -fsSL https://apt.releases.hashicorp.com/gpg | sudo gpg --dearmor -o /usr/share/keyrings/hashicorp-archive-keyring.gpg
            echo "deb [signed-by=/usr/share/keyrings/hashicorp-archive-keyring.gpg] https://apt.releases.hashicorp.com $(lsb_release -cs) main" | sudo tee /etc/apt/sources.list.d/hashicorp.list
            sudo apt-get update && sudo apt-get install terraform -y
          else
            echo "Terraform is already installed"
          fi
      - name: Check and install Docker if not present
        run: |
          if ! command -v docker &> /dev/null
          then
            echo "Docker not found. Installing Docker..."
            sudo apt-get update
            sudo apt-get install -y ca-certificates curl gnupg
            sudo install -m 0755 -d /etc/apt/keyrings
            curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg
            echo \
              "deb [arch="$(dpkg --print-architecture)" signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu \
              $(. /etc/os-release && echo "$VERSION_CODENAME") stable" | \
              sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
            sudo apt-get update
            sudo apt-get install -y docker-ce docker-ce-cli containerd.io
          else
            echo "Docker is already installed"
          fi
      - name: Check and install AWS CLI if not present
        run: |
          if ! command -v aws &> /dev/null
          then
            echo "AWS CLI not found. Installing AWS CLI..."
            sudo apt install unzip -y
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
          else
            echo "AWS CLI is already installed"
          fi      
      - name: Configure AWS CLI
        run: |
          echo "aws configure"
          aws configure set aws_access_key_id "${{ secrets.AWS_ACCESS_KEY_ID }}"
          aws configure set aws_secret_access_key "${{ secrets.AWS_SECRET_ACCESS_KEY }}"
          aws configure set default.region "${{ secrets.AWS_REGION }}"
          aws configure set output json
          echo "#######  testing  #######"
          aws s3 ls  
      - name: build docker image and push to ecr repo
        run: |
          sudo apt update
          sudo chown $USER /var/run/docker.sock
          aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin 200901485389.dkr.ecr.us-east-1.amazonaws.com
          docker build -t kool-vinay kool/.
          docker tag kool-vinay:latest 200901485389.dkr.ecr.us-east-1.amazonaws.com/kool-vinay:latest
          docker push 200901485389.dkr.ecr.us-east-1.amazonaws.com/kool-vinay:latest 
          docker rmi 200901485389.dkr.ecr.us-east-1.amazonaws.com/kool-vinay:latest 
      - name: terraform initialization 
        run: |
         cd terraform-eks/ && terraform init 
         terraform plan
         terraform apply 
      - name: Install kubectl if not present
        run: |
          echo "#######   kubectl    ######"
          if ! command -v kubectl &> /dev/null; then
            echo "kubectl not found. Installing..."
            curl -o kubectl https://amazon-eks.s3.us-west-2.amazonaws.com/1.19.6/2021-01-05/bin/linux/amd64/kubectl
            chmod +x ./kubectl
            sudo mv ./kubectl /usr/local/bin
          else
            echo "kubectl is already installed: $(kubectl version --short --client)"
          fi
      - name: Install eksctl if not present
        run: |
         echo "#######   eksctl    ######"
         if ! command -v eksctl &> /dev/null; then
         echo "eksctl not found. Installing..."
         curl --silent --location "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz" | tar xz -C /tmp
         sudo mv /tmp/eksctl /usr/local/bin
         else
         echo "eksctl is already installed: $(eksctl version)"
         fi
      - name: update kubeconfig
        run: |
          echo "#######   kubeconfig    ######"
          aws eks  update-kubeconfig --region us-east-1 --name my-eks-cluster
          kubectl get pods -A
      - name: Install Helm if not present
        run: |
          echo "#######   Checking Helm   ######"
          if ! command -v helm &> /dev/null; then
            echo "Helm not found. Installing..."
             curl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3
             chmod 700 get_helm.sh
             ./get_helm.sh
          else
            echo "Helm already installed: $(helm version --short)"
          fi
      
      - name: OIDC and IAM Service Account setup if not already done
        run: |
          echo "#######   OIDC Setup   ######"
          OIDC_CHECK=$(aws eks describe-cluster --name my-eks-cluster --region us-east-1 --query "cluster.identity.oidc.issuer" --output text)
      
          if [ "$OIDC_CHECK" != "None" ]; then
            echo "OIDC provider already associated: $OIDC_CHECK"
          else
            echo "Associating OIDC provider..."
            eksctl utils associate-iam-oidc-provider --cluster my-eks-cluster --approve --region us-east-1
          fi
      
          # Check if service account exists
          if kubectl get sa eks-admin-sa -n kube-system > /dev/null 2>&1; then
            echo "Service account 'eks-admin-sa' already exists in kube-system namespace."
          else
            echo "Creating service account and attaching policies..."
            eksctl create iamserviceaccount --name vinay --namespace kube-system --cluster my-eks-cluster --role-name vinay-role \
            --attach-policy-arn arn:aws:iam::aws:policy/AdministratorAccess --approve --override-existing-serviceaccounts
          fi
      
          # Output service account info
          kubectl get sa vinay -n kube-system -o yaml
      - name: Add EKS Helm repo if not already added
        run: |
          echo "#######   Helm repo check   ######"
          if helm repo list | grep -q '^eks'; then
            echo "EKS Helm repo already exists"
          else
            echo "Adding EKS Helm repo"
            helm repo add eks https://aws.github.io/eks-charts
          fi
          helm repo update
      
      - name: Install AWS Load Balancer Controller if not already installed
        run: |
          echo "#######   ALB Controller install check   ######"
          if helm list -n kube-system | grep -q 'aws-load-balancer-controller'; then
            echo "ALB Controller already installed"
          else
            echo "Installing ALB Controller"
            helm install aws-load-balancer-controller eks/aws-load-balancer-controller \
              -n kube-system \
              --set clusterName=my-eks-cluster \
              --set serviceAccount.create=false \
              --set serviceAccount.name=vinay
          fi
      
      
Update main.yml Â· vinaybv77716/kool@b2059ce 
